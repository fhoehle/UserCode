# finds out architecture name, defines system files, and construct
# the relevant directory for run, if not present. If the architecture
# cannot be figured out, defines ./Run as working directory, and use 
# sun as system file -- it should work in most of the cases
function architecture {
PATH=".:""$PATH"
thisdir=`pwd`
homedir=$HOME
case `uname` in
Linux*) ARCHNAME=Linux ; DBGFLAG='DEBUG=-ggdb' ; EXTRA='EXTRAOBJ=linux.o' ;
        EXMAKE=gmake ; CPOPT=pu ;;
OSF*)  ARCHNAME=Alpha ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=alpha.o' ;
       EXMAKE=gmake ; CPOPT=p ;;
Sun*) ARCHNAME=Sun ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=sun.o' ;
      EXMAKE=gmake ; CPOPT=p ;;
Darwin*) ARCHNAME=Darwin ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=sun.o' ;
         EXMAKE=make ; CPOPT=p ;;
*) ARCHNAME=Run ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=sun.o' ;;
esac
#
if [ -d $thisdir/$ARCHNAME ]
then
    echo $thisdir/$ARCHNAME directory already present
else
    mkdir $thisdir/$ARCHNAME
fi
}

# $? is the value of last executed command. A call to this function
# after a failure will cause the program to quit the script
function teststatus {
rc=$?
if [ 0 = $rc ]
then
:
else
echo $* did not succeed, exit status=$rc 
exit $rc
fi
}

# given IPROC, returns a string which identifies the target
# for the Makefile
function getSTRmake {
case $1 in
-1705|-1706|-11705|-11706|1705|1706|11705|11706) stringmake=QQ ;;
-2850|-2860|-2870|-2880|-12850|-12860|-12870|-12880) stringmake=VV ;;
2800|2810|2815|2820|2825) stringmake=VV ;;
12800|12810|12815|12820|12825) stringmake=VV ;;
-160[0-9]|-1160[0-9]|-161[0-2]|-1161[0-2]|-1699|-11699) stringmake=HG ;;
160[0-9]|1160[0-9]|161[0-2]|1161[0-2]|1699|11699) stringmake=HG ;;
-1396|-1397|-1497|-1498|-11396|-11397|-11497|-11498) stringmake=SB ;;
-13[5-7][1-6]|-14[6-7][1-3]|-113[5-7][1-6]|-114[6-7][1-3]) stringmake=LL ;;
135[0-6]|145[0-3]|1135[0-6]|1145[0-3]) stringmake=LL ;;
-260[0-9]|-261[0-2]|-2699|-1260[0-9]|-1261[0-2]|-12699) stringmake=VH ;;
-270[0-9]|-271[0-2]|-2799|-1270[0-9]|-1271[0-2]|-12799) stringmake=VH ;;
260[0-9]|261[0-2]|2699|1260[0-9]|1261[0-2]|12699) stringmake=VH ;;
270[0-9]|271[0-2]|2799|1270[0-9]|1271[0-2]|12799) stringmake=VH ;;
-20[0-2][0,1,4]|-120[0-2][0,1,4]) stringmake=ST ;;
200[0-8]|1200[0-8]) stringmake=ST ;;
-203[0,1,4]|-1203[0,1,4]) whichWtType $WTTYPE; stringmake=WT"$WtString" ;;
*) echo "Process not implemented" ; exit 1 ;;
esac
}

# utility function for dothelinks
function stripextension {
echo $1 | sed "s/\..*\$//"
}

# utility function for dothelinks
function capitalize {
echo $1 | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
}

# creates logical links for the PDF grid files. By P. Nason
function dothelinks {
if [ -d $PDFPATH ]
then
for i in ${PDFPATH}/*.dat ${PDFPATH}/*.tbl
do
if [ -f $i ]
then
name=`basename $i`
name=`stripextension $name`
case $name in
mrst200*) ;;
*mrs*|grpol|grvdm|lac1|pion[1-3]) name=`capitalize $name`;;
esac
if [ ! -L $thisdir/$ARCHNAME/$name ] || [ ! $thisdir/$ARCHNAME/$name -ef $i ]
then
ln -sf $i $thisdir/$ARCHNAME/$name
fi
fi
done
for i in ${PDFPATH}/a02.*
do
if [ -f $i ]
then
name=`basename $i`
if [ ! -L $thisdir/$ARCHNAME/$name ] || [ ! $thisdir/$ARCHNAME/$name -ef $i ]
then
ln -sf $i $thisdir/$ARCHNAME/$name
fi
fi
done
fi
}

# creates logical links for LHAPDF, and replaced PDF group name (unused
# by LHAPDF) with a LHAPDF-specific string
function linklhapdf {
case $LHAOFL in
FREEZE|freeze) PDFGROUP=LHAPDF ;;
EXTRAPOLATE|extrapolate) PDFGROUP=LHAEXT ;;
*) echo "no such option; failure in linklhapdf" ; exit 1 ;;
esac
if [ -d "$LHABASEPATH" ]
then
  ln -sf $LHABASEPATH/bin/lhapdf-config $thisdir/$ARCHNAME/lhapdf-config
else
  echo "Cannot find LHAPDF directory"
  exit 1
fi
}    

# creates the executable for NLO and MC; the entry of the function
# is either NLO or MC, depending on which executable one wants to obtain;
# PDFLIB or private PDF library is linked, depending on the value of
# the parameter UsedPdfLib, which is set by the function whichpdflib.
# Extra libraries are listed in the shell variable EXTRALIBS; do NOT
# remove the double quotes in the call to nameextralib, otherwise only
# the first library of the list is taken
function compile {
architecture
whichpdflib $PDFLIBRARY
nameextralib "$EXTRALIBS"
pathextralib "$EXTRAPATHS"
pathextralibdyn "$EXTRAPATHS"
pathextraincl "$INCLUDEPATHS"
EXEC_NAME=
EXEC_NAMEF=
EXEC_NAMEFF=
HWUTIMAKE="HWUTI="$HWUTI
HERWGMAKE="HERWIGVER="$HERWIGVER
LIBSMAKE="EXTRALIBS="$ExtraLibs
LIBSMAKEP="EXTRAPATHS="$ExtraPaths
INCLMAKE="INCLOPTION="$ExtraIncl
if [ "$LD_LIBRARY_PATH" = "" ]
then
  LD_LIBRARY_PATH="$ExtraPathsDyn"
else
  if [ "$ExtraPathsDyn" != "" ]
  then
    LD_LIBRARY_PATH="$ExtraPathsDyn"":""$LD_LIBRARY_PATH"
  fi
fi
LIBSLHA="LHALIB="
case $1 in
NLO) if [ $UsedPdfLib = "PDFLIB" ]
     then
	echo "ERROR: only LHAPDF supported."
	exit
     elif [ $UsedPdfLib = "THISLIB" ]
     then
	echo "ERROR: only LHAPDF supported."
	exit
     elif [ $UsedPdfLib = "LHAPDF" ]
     then
       EXEC_NAMEF="NLO_EXE_LHAPDF"
       LIBSLHA="$LIBSLHA""-L $LHABASEPATH/lib -lLHAPDF"
     else
       echo "no such option"; exit 1
     fi ;;
MC) if [ $UsedPdfLib = "PDFLIB" ]
     then
	echo "ERROR: only LHAPDF supported."
	exit
     elif [ $UsedPdfLib = "THISLIB" ]
     then
	echo "ERROR: only LHAPDF supported."
	exit
     elif [ $UsedPdfLib = "LHAPDF" ]
     then
       EXEC_NAMEF="MC_EXE_LHAPDF"
       LIBSLHA="$LIBSLHA""-L $LHABASEPATH/lib -lLHAPDF"
     else
       echo "fatal error in compile"; exit 1
     fi ;;
*) echo "do not know what to do in function compile" ; exit 1 ;;
esac
export LD_LIBRARY_PATH
if [ $1 = "NLO" ]
then
  getSTRmake $IPROC
  EXEC_NAME=$stringmake$EXEC_NAMEF
elif [ $1 = "MC" ]
then
  EXEC_NAME="$EXEC_NAMEF"
fi
EXEC_NAMEFF="$EXEPREFIX""$EXEC_NAMEF"
# stops if executable already exists (safety measure) 
if [ -f $thisdir/$ARCHNAME/$EXEC_NAMEFF ]
then
  echo "Executable already present: quitting"
  exit 1
fi
# creates a temporary directory to produce the executable, eventually moved
# back to running directory
CURRDATE=`date`
TMPDIRNAME=`echo $CURRDATE | cut -d" " -f1`
TMPDIRNAME=$TMPDIRNAME`echo $CURRDATE | cut -d" " -f2`
TMPDIRNAME=$TMPDIRNAME`echo $CURRDATE | cut -d" " -f3`
TMPDIRNAME=$TMPDIRNAME`echo $CURRDATE | cut -d" " -f4`
TMPDIRNAME=$EXEPREFIX$TMPDIRNAME
if [ -d "$thisdir/$ARCHNAME/$TMPDIRNAME" ]
then
  echo "Directory already present: quitting"
  exit 1
else
  mkdir "$thisdir/$ARCHNAME/$TMPDIRNAME"
fi
(cd $thisdir/$ARCHNAME/$TMPDIRNAME ;\
 $EXMAKE -f $thisdir/Makefile $EXTRA "$HWUTIMAKE" "$HERWGMAKE" \
 "$LIBSLHA" "$LIBSMAKE" "$LIBSMAKEP" "$INCLMAKE" \
 VPATH=$thisdir/$ARCHNAME/:$thisdir/:$HWPATH:$LHABASEPATH/lib/ $EXEC_NAME ;\
 if [ "$EXEC_NAME" != "$EXEC_NAMEFF" ] 
 then
   \mv $EXEC_NAME $EXEC_NAMEFF
 fi ;\
 if [ -f $thisdir/$ARCHNAME/$EXEC_NAMEFF ]
 then
   echo "Executable already present: quitting"
   exit 1
 else
   \mv $EXEC_NAMEFF $thisdir/$ARCHNAME/$EXEC_NAMEFF
   chmod 744 $thisdir/$ARCHNAME/$EXEC_NAMEFF
   find . -name "*".o -exec \cp -"$CPOPT" {} $thisdir/$ARCHNAME/ \;
   cd $thisdir/$ARCHNAME
   \rm -r $thisdir/$ARCHNAME/$TMPDIRNAME
 fi)
teststatus Compilation
}

# foolproof utility function, to be called by the user
function compileNLO {
compile NLO
}

# foolproof utility function, to be called by the user
function compileMC {
compile MC
}

# wrapper for the functions which run and compile NLO codes
function runNLO {
compile NLO
if [ $UsedPdfLib = "THISLIB" ]
then
  dothelinks
elif [ $UsedPdfLib = "LHAPDF" ]
then
  linklhapdf
fi
intonoff $BASES
whichtopdec $TOPDECAY
case $IPROC in
-1705|-1706|-11705|-11706) runNLOQQ ;;
-2850|-2860|-2870|-2880|-12850|-12860|-12870|-12880) runNLOVV ;;
-160[0-9]|-1160[0-9]|-161[0-2]|-1161[0-2]|-1699|-11699) runNLOHG ;;
-1396|-1397|-1497|-1498|-11396|-11397|-11497|-11498) runNLOSB ;;
-13[5-7][1-6]|-14[6-7][1-3]|-113[5-7][1-6]|-114[6-7][1-3]) runNLOLL ;;
-260[0-9]|-261[0-2]|-2699|-1260[0-9]|-1261[0-2]|-12699) runNLOVH ;;
-270[0-9]|-271[0-2]|-2799|-1270[0-9]|-1271[0-2]|-12799) runNLOVH ;;
-20[0-2][0,1,4]|-120[0-2][0,1,4]) runNLOST ;;
-203[0,1,4]|-1203[0,1,4]) runNLOWT ;;
*) echo "Process not implemented" ; exit 1 ;;
esac
teststatus runNLO
}

# compiles and runs the NLO for vector boson pair production
function runNLOVV {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
setaemrun $AEMRUN
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -2850/60/70/80=WW/ZZ/ZW+/ZW-
  $IL1CODE $IL2CODE               ! 1..6 -> V dec, 7 -> V undec
  $WMASS $WWIDTH                  ! M_W, Gamma_W
  $ZMASS $ZWIDTH                  ! M_Z, Gamma_Z
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V1(min), M_V1(max)
  $V2GAMMAX $V2MASSINF $V2MASSSUP ! GammaX, M_V2(min), M_V2(max)
EOF
if ([ $IPROC = -2850 ] || [ $IPROC = -12850 ]) &&
    [ $IL1CODE -lt 7 ] && [ $IL2CODE -lt 7 ]
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $BRWTOLEP                       ! W -> leptons branching ratio
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  0.2                             ! zi
  $ifxdaem                        ! 0=running, 1=fixed alpha_EM
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for heavy quark pair production
function runNLOQQ {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -1705/1706=bb/tt
  $HVQMASS                        ! M_Q
EOF
if [ $IPROC = -1706 ] || [ $IPROC = -11706 ] 
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $IL1CODE $IL2CODE               ! 0..6 -> t dec, 7 -> t undec
EOF
fi
if ([ $IPROC = -1706 ] || [ $IPROC = -11706 ]) &&
    [ $IL1CODE -lt 7 ] && [ $IL2CODE -lt 7 ]
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $TWIDTH                         ! top width
  $WMASS $WWIDTH                  ! M_W, Gamma_W
  $T1GAMMAX $T1MASSINF $T1MASSSUP ! GammaX, M_T(min), M_T(max)
  $T2GAMMAX $T2MASSINF $T2MASSSUP ! GammaX, M_Tb(min), M_Tb(max)
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V1(min), M_V1(max)
  $V2GAMMAX $V2MASSINF $V2MASSSUP ! GammaX, M_V2(min), M_V2(max)
  $VUD $VUS $VUB                  ! |V_ud|,|V_us|,|V_ub|
  $VCD $VCS $VCB                  ! |V_cd|,|V_cs|,|V_cb|
  $VTD $VTS $VTB                  ! |V_td|,|V_ts|,|V_tb|
  $inonbtop                       ! 0=t->Wb, 1=t->W+any d
  $BRTOPTOLEP                     ! t -> leptons branching ratio
  $BRTOPTOHAD                     ! t -> hadrons branching ratio
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  0.3                             ! zi
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for Higgs production
function runNLOHG {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $HGGMASS $HGGWIDTH $HVQMASS     ! M_H, Ga_H, M_top
  $HGAMMAX $HMASSINF $HMASSSUP    ! GammaX, M_H(min), M_H(max)
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  $IBORNHGG                       ! 1=Born exact, 2=M_top->inf
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for single vector boson production
function runNLOSB {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
setaemrun $AEMRUN
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -1396/97/1497/98=gamma/Z/W+/W-
EOF
if [ $IPROC = -1396 ] || [ $IPROC = -11396 ] 
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $V1MASSINF $V1MASSSUP           ! M_gamma(min), M_gamma(max)
EOF
else
getVpar
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $VMASS $VWIDTH $V1GAMMAX        ! M_V, Ga_V, GammaX
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  $ifxdaem                        ! 0=aem(M), 1=Thompson, 2=aem(M0)
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for dilepton production
function runNLOLL {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
setaemrun $AEMRUN
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -135#/136#/137#/146#/147#=Zg/Z/g/W+/W-
EOF
if ([ $IPROC -lt -11370 ] && [ $IPROC -gt -11374 ]) ||
   ([ $IPROC -lt -1370 ] && [ $IPROC -gt -1374 ])
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $V1MASSINF $V1MASSSUP           ! M_ll(min), M_ll(max)
EOF
else
getVpar
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $VMASS $VWIDTH                  ! M_V, Ga_V
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V(min), M_V(max)
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  $ifxdaem                        ! 0=running, 1=fixed alpha_EM
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for VH production
function runNLOVH {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
setaemrun $AEMRUN
getVpar
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -2600/2700=WH/ZH
  $IVCODE                         ! -1/0/1=W-/Z/W+
  $IL1CODE                        ! 1..6 -> V dec, 7 -> V undec
  $VMASS $VWIDTH                  ! M_V, Ga_V
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V(min), M_V(max)
  $HGGMASS $HGGWIDTH              ! M_H, Ga_H
  $HGAMMAX $HMASSINF $HMASSSUP    ! GammaX, M_H(min), M_H(max)
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  $ifxdaem                        ! 0=running, 1=fixed alpha_EM
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for single-top production
function runNLOST {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
setaemrun $AEMRUN
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -2000/10/20=all, s-ch, t-ch
  $HVQMASS $TWIDTH                ! M_top, Gamma_top
  $WMASS $WWIDTH                  ! M_W, Gamma_W
  $IL1CODE                        ! 1,2,3 -> t dec, 7 -> t undec
EOF
if [ $IL1CODE -lt 7 ]
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $T1GAMMAX $T1MASSINF $T1MASSSUP ! GammaX, M_T(min), M_T(max)
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V1(min), M_V1(max)
  $inonbtop                       ! 0=t->Wb, 1=t->W+any d
  $BRTOPTOLEP                     ! t -> leptons branching ratio
  $BRTOPTOHAD                     ! t -> hadrons branching ratio
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $VUD $VUS $VUB                  ! |V_ud|,|V_us|,|V_ub|
  $VCD $VCS $VCB                  ! |V_cd|,|V_cs|,|V_cb|
  $VTD $VTS $VTB                  ! |V_td|,|V_ts|,|V_tb|
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  $ifxdaem                        ! 0=running, 1=fixed alpha_EM
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# compiles and runs the NLO for Wt production
function runNLOWT {
ifile="$FPREFIX"NLOinput
FRENMC=$FREN
FFACTMC=$FFACT
setaemrun $AEMRUN
if [ -f $thisdir/$ARCHNAME/$ifile ]
then
\rm $thisdir/$ARCHNAME/$ifile 
fi
cat <<EOF > $thisdir/$ARCHNAME/$ifile 
 '$SCRTCH$FPREFIX'                ! prefix for BASES files
 '$SCRTCH$EVPREFIX'               ! prefix for event files
  $ECM $FREN $FFACT $FRENMC $FFACTMC ! energy, fren, ffact, frenmc, ffactmc
  $IPROC                          ! -2030/1/4=t+tb/tb/t
  $HVQMASS $TWIDTH                ! M_top, Gamma_top
  $WMASS $WWIDTH                  ! M_W, Gamma_W
  $IL1CODE                        ! 0..6 -> t dec, 7 -> t undec
  $IL2CODE                        ! 0..6 -> W dec, 7 -> W undec
EOF
if [ $IL1CODE -lt 7 ]
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $T1GAMMAX $T1MASSINF $T1MASSSUP ! GammaX, M_T(min), M_T(max)
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V1(min), M_V1(max)
  $V2GAMMAX $V2MASSINF $V2MASSSUP ! GammaX, M_V2(min), M_V2(max)
  $inonbtop                       ! 0=t->Wb, 1=t->W+any d
  $BRTOPTOLEP                     ! t -> leptons branching ratio
  $BRTOPTOHAD                     ! t -> hadrons branching ratio
  $BRWTOLEP                       ! W -> leptons branching ratio
  $BRWTOHAD                       ! W -> hadrons branching ratio
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $VUD $VUS $VUB                  ! |V_ud|,|V_us|,|V_ub|
  $VCD $VCS $VCB                  ! |V_cd|,|V_cs|,|V_cb|
  $VTD $VTS $VTB                  ! |V_td|,|V_ts|,|V_tb|
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
 '$PART1'  '$PART2'               ! hadron types
 '$PDFGROUP'   $PDFSET            ! PDF group and id number
  $LAMBDAFIVE                     ! Lambda_5, <0 for default
 '$SCHEMEOFPDF'                   ! scheme
  $PTVETO                         ! ptveto[mu_F,mu_R]
  $NEVENTS                        ! number of events
  $WGTTYPE                        ! 0 => wgt=+1/-1, 1 => wgt=+w/-w
  $RNDEVSEED                      ! seed for rnd numbers
  $ifxdaem                        ! 0=running, 1=fixed alpha_EM
  $bsitn1 $bsitn2                 ! itmx1,itmx2
EOF
( cd $thisdir/$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"NLO.log ;\
     remove_ev_files )
}

# wrapper for the functions which run and compile MC codes
function runMC {
echo "runMC not suported in this MC@NLO installation for CMSSW"
exit
compile MC
whichherpdf $HERPDF
if [ $pdftype = 1 ]
then
  whichpdflib $PDFLIBRARY
  if [ $UsedPdfLib = "THISLIB" ]
  then
    dothelinks
  elif [ $UsedPdfLib = "LHAPDF" ]
  then
    linklhapdf
  fi
fi
case $IPROC in
-1705|-1706|-11705|-11706|1705|1706|11705|11706) runMCQQ ;;
-2850|-2860|-2870|-2880|-12850|-12860|-12870|-12880) runMCVV ;;
2800|2810|2815|2820|2825) runMCVV ;;
12800|12810|12815|12820|12825) runMCVV ;;
-160[0-9]|-1160[0-9]|-161[0-2]|-1161[0-2]|-1699|-11699) runMCHG ;;
160[0-9]|1160[0-9]|161[0-2]|1161[0-2]|1699|11699) runMCHG ;;
-1396|-1397|-1497|-1498|-11396|-11397|-11497|-11498) runMCSB ;;
-13[5-7][1-6]|-14[6-7][1-3]|-113[5-7][1-6]|-114[6-7][1-3]) runMCLL ;;
135[0-6]|145[0-3]|1135[0-6]|1145[0-3]) runMCLL ;;
-260[0-9]|-261[0-2]|-2699|-1260[0-9]|-1261[0-2]|-12699) runMCVH ;;
-270[0-9]|-271[0-2]|-2799|-1270[0-9]|-1271[0-2]|-12799) runMCVH ;;
260[0-9]|261[0-2]|2699|1260[0-9]|1261[0-2]|12699) runMCVH ;;
270[0-9]|271[0-2]|2799|1270[0-9]|1271[0-2]|12799) runMCVH ;;
-20[0-2][0,1,4]|-120[0-2][0,1,4]) runMCST ;;
200[0-8]|1200[0-8]) runMCST ;;
-203[0,1,4]|-1203[0,1,4]) runMCWT ;;
*) echo "Process not implemented" ; exit 1 ;;
esac
teststatus runMC
}

# compiles and runs the MC for vector boson pair production
function runMCVV {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -2850/60/70/80=WW/ZZ/ZW+/ZW-
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
cat <<EOF >> ./$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $WMASS $WWIDTH                  ! M_W, Gamma_W
  $ZMASS $ZWIDTH                  ! M_Z, Gamma_Z
  $V1GAMMAX $V2GAMMAX             ! GammaX(V1), GammaX(V2)
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for heavy quark pair production
function runMCQQ {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -1705/1706=bb/tt
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
if ([ $IPROC = -1706 ] || [ $IPROC = -11706 ]) ||
   ([ $IPROC = 1706 ] || [ $IPROC = 11706 ])
then
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $HVQMASS $WMASS                 ! M_t, M_W
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
else
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $HVQMASS                        ! M_b
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
fi
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for Higgs production
function runMCHG {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -1600
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
cat <<EOF >> ./$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $HGGMASS $HVQMASS               ! M_H, M_top
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for single vector boson production
function runMCSB {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -1396/97/1497/98=gamma/Z/W+/W-
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
if [ $IPROC = -1396 ] || [ $IPROC = -11396 ] 
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $V1MASSINF $V1MASSSUP           ! M_gamma(min), M_gamma(max)
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
else
  getVpar
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $VMASS $VWIDTH $V1GAMMAX        ! M_V, Ga_V, GammaX
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
fi
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for dilepton production
function runMCLL {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -135#/136#/137#/146#/147#=Zg/Z/g/W+/W-
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
if ([ $IPROC -lt -11370 ] && [ $IPROC -gt -11374 ]) ||
   ([ $IPROC -lt -1370 ] && [ $IPROC -gt -1374 ])
then
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $V1MASSINF $V1MASSSUP           ! M_ll(min), M_ll(max)
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
else
  getVpar
  cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $VMASS $VWIDTH                  ! M_V, Ga_V
  $V1GAMMAX $V1MASSINF $V1MASSSUP ! GammaX, M_V(min), M_V(max)
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
fi
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for VH production
function runMCVH {
ifile="$FPREFIX"MCinput
getVpar
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -2600/2700=WH/ZH
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $VMASS $VWIDTH                  ! M_V, Ga_V
  $HGGMASS                        ! M_H
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for single-top production
function runMCST {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -2000/10/20=all, s-ch, t-ch
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $HVQMASS $WMASS                 ! M_t, M_W
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the MC for Wt production
function runMCWT {
ifile="$FPREFIX"MCinput
if [ -f ./$ARCHNAME/$ifile ]
then
\rm ./$ARCHNAME/$ifile 
fi
getbeammom $ECM
cat <<EOF > ./$ARCHNAME/$ifile 
 '$SCRTCH$EVPREFIX.events'        ! event file
  $NEVENTS                        ! number of events
  $pdftype                        ! 0->Herwig PDFs, 1 otherwise
 '$PART1'  '$PART2'               ! hadron types
  $beammom $beammom               ! beam momenta
  $IPROC                          ! -2030/1/4=t+tb/tb/t
EOF
if [ $pdftype = 1 ]
then
cat <<EOF >> ./$ARCHNAME/$ifile 
 '$PDFGROUP'                      ! PDF group (1)
  $PDFSET                         ! PDF id number (1)
 '$PDFGROUP'                      ! PDF group (2)
  $PDFSET                         ! PDF id number (2)
EOF
fi
cat <<EOF >> $thisdir/$ARCHNAME/$ifile 
  $LAMBDAHERW                     ! Lambda_5, < 0 for default
  $HVQMASS $WMASS                 ! M_t, M_W
  $UMASS $DMASS $SMASS $CMASS $BMASS $GMASS ! quark and gluon masses
EOF
( cd ./$ARCHNAME ;\
     $EXEC_NAMEFF < $ifile > "$FPREFIX"MC.log)
}

# compiles and runs the NLO, then the MC
function runMCatNLO {
runNLO
runMC
}

# fills the variables VMASS and VWIDTH according to the value of IPROC. These
# are private variables, and are not included in MCatNLO.inputs; they are not
# meant to be accessed by the user. In version 3.1, this function is called
# by runNLOs and runMCs relevant to single vector boson, lepton pair, and
# associated Higgs production
function getVpar {
case $IPROC in
-1397|-11397) VMASS=$ZMASS
              VWIDTH=$ZWIDTH ;;
-1497|-11497|-1498|-11498) VMASS=$WMASS
                           VWIDTH=$WWIDTH ;;
-13[5-7][1-6]|-113[5-7][1-6]) VMASS=$ZMASS
                              VWIDTH=$ZWIDTH ;;
-14[6-7][1-3]|-114[6-7][1-3]) VMASS=$WMASS
                              VWIDTH=$WWIDTH ;;
-260[0-9]|-261[0-2]|-2699|-1260[0-9]|-1261[0-2]|-12699) VMASS=$WMASS
                                                        VWIDTH=$WWIDTH ;;
-270[0-9]|-271[0-2]|-2799|-1270[0-9]|-1271[0-2]|-12799) VMASS=$ZMASS
                                                        VWIDTH=$ZWIDTH ;;
135[0-6]|1135[0-6]) VMASS=$ZMASS
                    VWIDTH=$ZWIDTH ;;
145[0-3]|1145[0-3]) VMASS=$WMASS
                    VWIDTH=$WWIDTH ;;
260[0-9]|261[0-2]|2699|1260[0-9]|1261[0-2]|12699) VMASS=$WMASS
                                                  VWIDTH=$WWIDTH ;;
270[0-9]|271[0-2]|2799|1270[0-9]|1271[0-2]|12799) VMASS=$ZMASS
                                                  VWIDTH=$ZWIDTH ;;
*) echo "No such option in getVpar" ; exit 1 ;;
esac
}

# returns the NLO and Herwig codes corresponding to the vector boson pair
# given in input. This function is obsolete, and not called
function getVVcode {
case $1 in
WW|ww) NLOcode=4
       MCcode=2850 ;;
ZZ|zz) NLOcode=3
       MCcode=2860 ;;
ZW+|zw+) NLOcode=1
         MCcode=2870 ;;
ZW-|zw-) NLOcode=2
         MCcode=2870 ;;
*) echo "No such vector boson pair" ; exit 1 ;;
esac
}

# the entry is the CM energy, the return value (beammom) is half
# of it (that is, the beam momentum in the CM frame, neglecting
# particle masses. Only two decimal digits are kept; if more are
# needed, increase the scale value in the expression below
function getbeammom {
beammom=0
two=2
beammom=$(echo "scale=2; $1 / $two" | bc -l)
}

# remove event files, relevant to partonic subprocesses, from the
# working directory. The .integral file could also be removed by 
# using this function. This function must be called from the
# working directory: get there first
function remove_ev_files {
if [ $NEVENTS != 0 ]
then
case $IPROC in
-1705|-1706|-11705|-11706)
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-160[0-9]|-1160[0-9]|-161[0-2]|-1161[0-2]|-1699|-11699)
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-1396|-1397|-1497|-1498|-11396|-11397|-11497|-11498) 
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-13[5-7][1-6]|-14[6-7][1-3]|-113[5-7][1-6]|-114[6-7][1-3]) 
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-20[0-2][0,1,4]|-120[0-2][0,1,4]) 
  \rm "$SCRTCH$EVPREFIX"_ain.events
  \rm "$SCRTCH$EVPREFIX"_bin.events
  \rm "$SCRTCH$EVPREFIX"_aout.events
  \rm "$SCRTCH$EVPREFIX"_bout.events ;;
-203[0,1,4]|-1203[0,1,4]) 
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-260[0-9]|-261[0-2]|-2699|-1260[0-9]|-1261[0-2]|-12699) 
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-270[0-9]|-271[0-2]|-2799|-1270[0-9]|-1271[0-2]|-12799) 
  \rm "$SCRTCH$EVPREFIX"_a.events
  \rm "$SCRTCH$EVPREFIX"_b.events ;;
-2850|-2860|-2870|-2880|-12850|-12860|-12870|-12880) 
  \rm "$SCRTCH$EVPREFIX"qq_a.events
  \rm "$SCRTCH$EVPREFIX"qq_b.events
  \rm "$SCRTCH$EVPREFIX"qg_a.events
  \rm "$SCRTCH$EVPREFIX"qg_b.events
  if [ $IPROC != -2860 ] && [ $IPROC != -12860 ]
  then
    \rm "$SCRTCH$EVPREFIX"ag_a.events
    \rm "$SCRTCH$EVPREFIX"ag_b.events
  fi ;;
*) echo "Process not implemented" ; exit 1 ;;
esac
fi
}

# set the number of Bases iterations to default, depending on the 
# setting of the input parameter BASES (which is the entry of this 
# function
function intonoff {
case $1 in
ON|on) bsitn1=10 ; bsitn2=10 ;;
OFF|off) bsitn1=0 ; bsitn2=0 ;;
*) echo "error in intonoff: no such option" ; exit 1 ;;
esac
}

# this function set the parameter pdftype according to the value 
# of HERPDF (the entry of this function) given in input
function whichherpdf {
case $1 in
DEFAULT|default) pdftype=0 ;;
EXTPDF|extpdf) pdftype=1 ;;
*) echo "error in whichherpdf: no such option" ; exit 1 ;;
esac
}

# checks that the value given to PDFLIBRAY in input is meaningful
function whichpdflib {
case $1 in
THISLIB|thislib) UsedPdfLib=THISLIB ;;
PDFLIB|pdflib) UsedPdfLib=PDFLIB ;;
LHAPDF|lhapdf) UsedPdfLib=LHAPDF ;;
*) echo "no such library for PDFS; failure in whichpdflib" ; exit 1 ;;
esac
}

# sets the string WtString equal to DR or DS, according to the
# value of the shell parameter WTTYPE
function whichWtType {
case $1 in
REMOVAL|removal) WtString=DR ;;
SUBTRACTION|subtraction) WtString=DS ;;
*) echo "error in whichWtType: no such option" ; exit 1 ;;
esac
}

# prepends -l to library names
function nameextralib {
ExtraLibs="$1"
ilen1=${#ExtraLibs}
if [ $ilen1 -ne 0 ]
then
  ExtraLibs=`echo $ExtraLibs | sed "s/ / -l/g"`
  ExtraLibs="-l""$ExtraLibs"
fi
}

# prepends -L to library paths
function pathextralib {
ExtraPaths="$1"
ilen2=${#ExtraPaths}
if [ $ilen2 -ne 0 ]
then
  ExtraPaths=`echo $ExtraPaths | sed "s/ / -L/g"`
  ExtraPaths="-L""$ExtraPaths"
fi
}

# separate library names with columns
function pathextralibdyn {
ExtraPathsDyn="$1"
ilen3=${#ExtraPathsDyn}
if [ $ilen3 -ne 0 ]
then
  ExtraPathsDyn=`echo $ExtraPathsDyn | sed "s/ /:/g"`
fi
}

# prepends -I to include paths
function pathextraincl {
ExtraIncl="$1"
ilen4=${#ExtraIncl}
if [ $ilen4 -ne 0 ]
then
  ExtraIncl=`echo $ExtraIncl | sed "s/ / -I/g"`
  ExtraIncl="-I""$ExtraIncl"
fi
}

# set the internal variable ifxdaem=0 if AEMRUN=YES (running alpha_em),
# ifxdaem=1 if AEMRUN=NO (Thomson value)
function setaemrun {
case $1 in
YES|yes) ifxdaem=0 ;;
NO|no) ifxdaem=1 ;;
*) echo "error in setaemrun: no such option" ; exit 1 ;;
esac
}

# set the local variable inonbtop, which controls the top decay,
# according to the value of the input parameter TOPDECAY (which is 
# the entry of this function)
function whichtopdec {
case $1 in
WB|Wb|wB|wb) inonbtop=0 ;;
ALL|all) inonbtop=1 ;;
*) echo "error in whichtopdec: no such option" ; exit 1 ;;
esac
}

